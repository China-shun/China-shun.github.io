<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微信小程序代码规范</title>
    <url>/2019/11/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h5 id="微信小程序里的四种文件"><a href="#微信小程序里的四种文件" class="headerlink" title="微信小程序里的四种文件"></a>微信小程序里的四种文件</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.json</span> 后缀的 <span class="selector-tag">JSON</span> 配置文件</span><br><span class="line"><span class="selector-class">.wxml</span> 后缀的 <span class="selector-tag">WXML</span> 模板文件</span><br><span class="line"><span class="selector-class">.wxss</span> 后缀的 <span class="selector-tag">WXSS</span> 样式文件</span><br><span class="line"><span class="selector-class">.js</span> 后缀的 <span class="selector-tag">JS</span> 脚本逻辑文件</span><br></pre></td></tr></table></figure>

<h5 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">### 图片资源</span></span><br><span class="line">目前图片资源的主要性能问题在于大图片和长列表图片上，</span><br><span class="line">这两种情况都有可能导致 iOS 客户端内存占用上升，</span><br><span class="line">从而触发系统回收小程序页面。</span><br><span class="line"><span class="meta">### 图片对内存的影响</span></span><br><span class="line">在 iOS 上，小程序的页面是由多个 <span class="built_in">WKWebView</span> 组成的，</span><br><span class="line">在系统内存紧张时，会回收掉一部分 <span class="built_in">WKWebView</span>。</span><br><span class="line">从过去我们分析的案例来看，大图片和长列表图片的使用会引起 <span class="built_in">WKWebView</span> 的回收。</span><br><span class="line"><span class="meta">### 图片对页面切换的影响</span></span><br><span class="line">除了内存问题外，大图片也会造成页面切换的卡顿。</span><br><span class="line">我们分析过的案例中，有一部分小程序会在页面中引用大图片，</span><br><span class="line">在页面后退切换中会出现掉帧卡顿的情况。</span><br><span class="line">当前我们建议开发者尽量减少使用大图片资源。</span><br></pre></td></tr></table></figure>

<h5 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">所有资源文件(如图片)放在统一文件下及其子文件中(例如以下分类)</span><br><span class="line">resource</span><br><span class="line">  ——<span class="keyword">public</span></span><br><span class="line">  ——tab</span><br><span class="line">  ——home</span><br><span class="line">  ——mine</span><br></pre></td></tr></table></figure>

<h5 id="基础页面"><a href="#基础页面" class="headerlink" title="基础页面"></a>基础页面</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">业务展示的页面放在如 pages 文件及其子文件中(例如以下分类)</span><br><span class="line">pages</span><br><span class="line">  ——index</span><br><span class="line">  ——mall</span><br><span class="line">    ——goodList</span><br><span class="line">    ——goodDetail</span><br><span class="line">  ——order</span><br><span class="line">    ——orderList</span><br><span class="line">    ——orderDetail</span><br><span class="line">  ——mine</span><br><span class="line">    ——myInfo</span><br><span class="line">    ——myAddress</span><br><span class="line">    </span><br><span class="line">如有其他子业务，单独在pages里创建新的子级文件</span><br><span class="line">注释规范</span><br><span class="line">   针对wxml页面由上到下(或由左到右)分级的模块，均需注释出其功能，</span><br><span class="line">   并在其上下空出一行与其他代码进行区分。</span><br></pre></td></tr></table></figure>

<h5 id="样式文件"><a href="#样式文件" class="headerlink" title="样式文件"></a>样式文件</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">基础样式文件，在最外层中创建(如：<span class="selector-tag">weui</span><span class="selector-class">.wxss</span>)</span><br><span class="line">第一步：写入公共样式：如 </span><br><span class="line">1.标题字体大小，描述字体大小等项目中一二三级字号；</span><br><span class="line">2.程序中所用的公共色值；</span><br><span class="line">3.布局方式<span class="selector-tag">flex</span>的横向布局，纵向布局等；</span><br><span class="line">4.公共布局中<span class="selector-tag">wxss</span>样式前缀统一(如<span class="selector-tag">weui-</span>开头)；</span><br><span class="line">等等</span><br><span class="line"></span><br><span class="line">第二步：在<span class="selector-tag">app</span><span class="selector-class">.wxss</span>文件最上部，引入 @<span class="keyword">import</span> <span class="string">"weui.wxss"</span>;</span><br><span class="line">以上公共样式便可全局使用</span><br><span class="line"><span class="selector-tag">wxss</span>规范</span><br><span class="line">    1<span class="selector-class">.wxss</span> 页面可使用快捷键真理代码(<span class="selector-tag">Shift</span>+<span class="selector-tag">Alt</span>+<span class="selector-tag">F</span>)</span><br><span class="line">    整理后代码有明显的代码缩进，对齐。每一个样式类之间空出一行；</span><br><span class="line"></span><br><span class="line">    2.在开发过程中<span class="selector-tag">rpx</span>和<span class="selector-tag">px</span>均可能用到，</span><br><span class="line">    如通常情况下间距使用<span class="selector-tag">rpx</span>，</span><br><span class="line">    字体大小和边框等使用<span class="selector-tag">px</span>，开发者根据实际情况而定；</span><br><span class="line">       </span><br><span class="line">    3.同一块的样式属性(如 <span class="selector-class">.order-title</span> 和 <span class="selector-class">.order-image</span>)放在一块；</span><br><span class="line">    </span><br><span class="line">    4<span class="selector-class">.wxss</span> 样式中同一块可以这样抒写(如 <span class="selector-class">.order</span><span class="selector-class">.title</span>)</span><br><span class="line">    意思是<span class="selector-class">.order</span>样式下的<span class="selector-class">.title</span>,</span><br><span class="line">    其他地方的class='title'不会引用到.order下的.title</span><br><span class="line">    </span><br><span class="line">    5<span class="selector-class">.wxss</span>样式之间用块状注释。请勿在代码后面直接注释。</span><br></pre></td></tr></table></figure>

<h5 id="JS规范"><a href="#JS规范" class="headerlink" title="JS规范"></a>JS规范</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">JS规范</span><br><span class="line">    <span class="number">1.</span>删除js文件中未用到的生命周期函数，保持代码的整洁</span><br><span class="line">    <span class="number">2.</span>右上角不要分享的页面，删除JS文件中该方法onShareAppMessage:function()</span><br><span class="line">    <span class="number">3.</span>采用ES6 关键字<span class="keyword">let</span>定义变量，尽量不使用<span class="keyword">var</span></span><br><span class="line">    <span class="number">4.</span>所有涉及到数据绑定的变量均需在data中初始化,禁止在不定义的情况下直接setData</span><br><span class="line">    <span class="number">5.</span>变量名以及函数名统一采用驼峰命名法(或下划线分割)</span><br><span class="line">    <span class="number">6.</span>正常情况下函数名前缀需加上清晰的动词表示函数功能(如getOderList)</span><br><span class="line">    <span class="number">7.</span>点击事件函数命名方式为 <span class="keyword">on</span> + 事件名 或者业务名</span><br><span class="line">    <span class="number">8.</span>JS语句无需以分号结束，统一省略分号</span><br><span class="line">    <span class="number">9.</span>JS中一致使用单引号<span class="string">' '</span> , WXML中一致使用双引号<span class="string">" "</span></span><br></pre></td></tr></table></figure>



<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>一个ES6的模块是一个包含了js代码的文件。<strong>ES6里没有所谓的module关键字，一个模块就是一个普通的脚本文件</strong>，除了以下两个区别：</p>
<p>\1. ES6中的模块自动开启严格模式。<br>\2. 模块中可以使用import和export。</p>
<p><strong>导入和导出</strong></p>
<p>我们可以通过import和export关键字将函数或<strong>对象导入和导出模块</strong>。<br>先来说说export，在模块中声明的任何东西都是默认私有的，<strong>如果想对其他模块public，必须将那部分代码export</strong>。最简单的方法就是添加一个export关键字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`// kittydar.js`</span><span class="string">`export `</span><span class="string">`function`</span> <span class="string">`detectCats(canvas, options) &#123;`</span><span class="string">`var`</span> <span class="string">`kittydar = `</span><span class="string">`new`</span> <span class="string">`Kittydar(options);`</span><span class="string">`return`</span> <span class="string">`kittydar.detectCats(canvas);`</span><span class="string">`&#125;`</span><span class="string">`export class Kittydar &#123;`</span><span class="string">`... several methods doing image processing ...`</span><span class="string">`&#125;`</span><span class="string">`// This helper function isn't exported.`</span><span class="string">`function`</span> <span class="string">`resizeCanvas() &#123;`</span><span class="string">`...`</span><span class="string">`&#125;`</span><span class="string">`...`</span></span><br></pre></td></tr></table></figure>

<p>不再有跨文件或跨模块的全局变量，<strong>export声明的那部分就是这个模块的public API</strong>。而在另外一个文件中，我们可以导入这个模块并且使用detectCat方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`// demo.js - Kittydar demo program`</span><span class="string">`import &#123;detectCats&#125; from `</span><span class="string">`"kittydar.js"`</span><span class="string">`;`</span><span class="string">`function`</span> <span class="string">`go() &#123;`</span><span class="string">`var`</span> <span class="string">`canvas = document.getElementById(`</span><span class="string">`"catpix"`</span><span class="string">`);`</span><span class="string">`var`</span> <span class="string">`cats = detectCats(canvas);`</span><span class="string">`drawRectangles(canvas, cats);`</span><span class="string">`&#125;`</span></span><br></pre></td></tr></table></figure>

<p>如果需要导入多个模块中的接口，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`import &#123;detectCats, Kittydar&#125; from `</span><span class="string">`"kittydar.js"`</span><span class="string">`;`</span></span><br></pre></td></tr></table></figure>

<p>我们也可以通过一行代码将本模块所有需要public的方法公开：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`export &#123;detectCats, Kittydar&#125;;`</span></span><br></pre></td></tr></table></figure>

<p>这样就不用一个个地添加export关键字了。</p>
<p><strong>命名冲突</strong></p>
<p>上面介绍了模块中的导入和导出，那么如果导入的变量名和模块中的变量名冲突了应该如何是好呢？放心，<strong>ES6允许我们为导入的内容重命名</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`import &#123;flip as flipOmelet&#125; from `</span><span class="string">`"eggs.js"`</span><span class="string">`;`</span><span class="string">`import &#123;flip as flipHouse&#125; from `</span><span class="string">`"real-estate.js"`</span><span class="string">`;`</span></span><br></pre></td></tr></table></figure>

<p>这样就将从eggs模块来的<strong>flip改为了flipOmelet</strong>，从real-estate模块来的<strong>flip改为了flipHouse</strong>，从而避免了冲突。</p>
<p>同样的，我们也可以在模块导出变量名时进行重命名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`function`</span> <span class="string">`v1() &#123; ... &#125;`</span><span class="string">`function`</span> <span class="string">`v2() &#123; ... &#125;`</span><span class="string">`export &#123;`</span><span class="string">`v1 as streamV1,`</span><span class="string">`v2 as streamV2,`</span><span class="string">`v2 as streamLatestVersion`</span><span class="string">`&#125;;`</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>python开发规范</title>
    <url>/2019/11/28/python%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>Tip</p>
<p>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>
<h2 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h2><p>Tip</p>
<p>每行不超过80个字符</p>
<p>例外:</p>
<ol>
<li>长的导入模块语句</li>
<li>注释里的URL</li>
</ol>
<p>不要使用反斜杠连接行.</p>
<p>Python会将 <a href="http://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining" target="_blank" rel="noopener">圆括号, 中括号和花括号中的行隐式的连接起来</a> , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="literal">None</span>, x=<span class="string">'foo'</span>,</span><br><span class="line">             emphasis=<span class="literal">None</span>, highlight=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">         color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span>):</span><br></pre></td></tr></table></figure>

<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = (<span class="string">'This will build a very long long '</span></span><br><span class="line">     <span class="string">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure>

<p>在注释中，如果必要，将长的URL放在一行上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:  <span class="comment"># See details at</span></span><br><span class="line">      <span class="comment"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br><span class="line">No:  <span class="comment"># See details at</span></span><br><span class="line">     <span class="comment"># http://www.example.com/us/developer/documentation/api/content/\</span></span><br><span class="line">     <span class="comment"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure>

<p>注意上面例子中的元素缩进; 你可以在本文的 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#indentation" target="_blank" rel="noopener">缩进</a> 部分找到解释.</p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>Tip</p>
<p>宁缺毋滥的使用括号</p>
<p>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> foo:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">while</span> x:</span><br><span class="line">         x = bar()</span><br><span class="line">     <span class="keyword">if</span> x <span class="keyword">and</span> y:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">return</span> foo</span><br><span class="line">     <span class="keyword">for</span> (x, y) <span class="keyword">in</span> dict.items(): ...</span><br><span class="line">No:  <span class="keyword">if</span> (x):</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span>(x):</span><br><span class="line">         bar()</span><br><span class="line">     <span class="keyword">return</span> (foo)</span><br></pre></td></tr></table></figure>



<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>Tip</p>
<p>用4个空格来缩进代码</p>
<p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素(见 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#line-length" target="_blank" rel="noopener">行长度</a> 部分的示例), 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:   <span class="comment"># Aligned with opening delimiter</span></span><br><span class="line">       foo = long_function_name(var_one, var_two,</span><br><span class="line">                                var_three, var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Aligned with opening delimiter in a dictionary</span></span><br><span class="line">       foo = &#123;</span><br><span class="line">           long_dictionary_key: value1 +</span><br><span class="line">                                value2,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 4-space hanging indent; nothing on first line</span></span><br><span class="line">       foo = long_function_name(</span><br><span class="line">           var_one, var_two, var_three,</span><br><span class="line">           var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 4-space hanging indent in a dictionary</span></span><br><span class="line">       foo = &#123;</span><br><span class="line">           long_dictionary_key:</span><br><span class="line">               long_dictionary_value,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">No:    <span class="comment"># Stuff on first line forbidden</span></span><br><span class="line">      foo = long_function_name(var_one, var_two,</span><br><span class="line">          var_three, var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 2-space hanging indent forbidden</span></span><br><span class="line">      foo = long_function_name(</span><br><span class="line">        var_one, var_two, var_three,</span><br><span class="line">        var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># No hanging indent in a dictionary</span></span><br><span class="line">      foo = &#123;</span><br><span class="line">          long_dictionary_key:</span><br><span class="line">              long_dictionary_value,</span><br><span class="line">              ...</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>Tip</p>
<p>顶级定义之间空两行, 方法定义之间空一行</p>
<p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>Tip</p>
<p>按照标准的排版规范来使用标点两边的空格</p>
<p>括号内不要有空格.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])</span><br><span class="line">No:  spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure>

<p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">         <span class="keyword">print</span> x, y</span><br><span class="line">     x, y = y, x</span><br><span class="line">No:  <span class="keyword">if</span> x == <span class="number">4</span> :</span><br><span class="line">         <span class="keyword">print</span> x , y</span><br><span class="line">     x , y = y , x</span><br></pre></td></tr></table></figure>

<p>参数列表, 索引或切片的左括号前不应加空格.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: spam(<span class="number">1</span>)</span><br><span class="line">no: spam (<span class="number">1</span>)</span><br><span class="line">Yes: dict[<span class="string">'key'</span>] = list[index]</span><br><span class="line">No:  dict [<span class="string">'key'</span>] = list [index]</span><br></pre></td></tr></table></figure>

<p>在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: x == <span class="number">1</span></span><br><span class="line">No:  x&lt;<span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>

<p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     foo = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">     long_name = <span class="number">2</span>  <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br><span class="line">No:</span><br><span class="line">     foo       = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">     long_name = <span class="number">2</span>     <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>      : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Tip</p>
<p>确保对模块, 函数, 方法和行内注释使用正确的风格</p>
<p><strong>文档字符串</strong></p>
<blockquote>
<p>Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<strong>doc</strong>成员被自动提取, 并且被pydoc所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号”“”( <a href="http://www.python.org/dev/peps/pep-0257/" target="_blank" rel="noopener">PEP-257</a> ). 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</p>
</blockquote>
<p><strong>模块</strong></p>
<blockquote>
<p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</p>
</blockquote>
<p><strong>函数和方法</strong></p>
<blockquote>
<p>下文所指的函数,包括函数, 方法, 以及生成器.</p>
<p>一个函数必须要有文档字符串, 除非它满足以下条件:</p>
<ol>
<li>外部不可见</li>
<li>非常短小</li>
<li>简单明了</li>
</ol>
<p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</p>
<p>关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</p>
<ul>
<li><p>Args:</p>
<p>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受<em>foo(可变长度参数列表)或者*</em>bar (任意关键字参数), 应该详细列出<em>foo和*</em>bar.</p>
</li>
<li><p>Returns: (或者 Yields: 用于生成器)</p>
<p>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</p>
</li>
<li><p>Raises:</p>
<p>列出与接口有关的所有异常.</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class="line"><span class="string">    represented by big_table.  Silly things may happen if</span></span><br><span class="line"><span class="string">    other_silly_variable is not None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        big_table: An open Bigtable Table instance.</span></span><br><span class="line"><span class="string">        keys: A sequence of strings representing the key of each table row</span></span><br><span class="line"><span class="string">            to fetch.</span></span><br><span class="line"><span class="string">        other_silly_variable: Another optional variable, that has a much</span></span><br><span class="line"><span class="string">            longer name than the other args, and which does nothing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A dict mapping keys to the corresponding table row data</span></span><br><span class="line"><span class="string">        fetched. Each row is represented as a tuple of strings. For</span></span><br><span class="line"><span class="string">        example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class="line"><span class="string">         'Zim': ('Irk', 'Invader'),</span></span><br><span class="line"><span class="string">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a key from the keys argument is missing from the dictionary,</span></span><br><span class="line"><span class="string">        then that row was not found in the table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>类</strong></p>
<blockquote>
<p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Summary of class here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Longer class information....</span></span><br><span class="line"><span class="string">    Longer class information....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        likes_spam: A boolean indicating if we like SPAM or not.</span></span><br><span class="line"><span class="string">        eggs: An integer count of the eggs we have laid.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></span><br><span class="line">        <span class="string">"""Inits SampleClass with blah."""</span></span><br><span class="line">        self.likes_spam = likes_spam</span><br><span class="line">        self.eggs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Performs operation blah."""</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>块注释和行注释</strong></p>
<blockquote>
<p>最需要写注释的是代码中那些技巧性的部分. 如果你在下次 <a href="http://en.wikipedia.org/wiki/Code_review" target="_blank" rel="noopener">代码审查</a> 的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We use a weighted dictionary search to find out where i is in</span></span><br><span class="line"><span class="comment"># the array.  We extrapolate position based on the largest num</span></span><br><span class="line"><span class="comment"># in the array and the array size and then do binary search to</span></span><br><span class="line"><span class="comment"># get the exact number.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &amp; (i<span class="number">-1</span>) == <span class="number">0</span>:        <span class="comment"># True if i is 0 or a power of 2.</span></span><br></pre></td></tr></table></figure>

<p>为了提高可读性, 注释应该至少离开代码2个空格.</p>
<p>另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class="line"><span class="comment"># the next element is i+1</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>Tip</p>
<p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Yes: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span><span class="params">(object)</span>:</span></span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span><span class="params">(ParentClass)</span>:</span></span><br><span class="line">         <span class="string">"""Explicitly inherits from another class already."""</span></span><br><span class="line">No: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>继承自 <code>object</code> 是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受 <a href="http://www.python.org/dev/peps/pep-3000/" target="_blank" rel="noopener">PEP-3000</a> 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 <code>__new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__</code> .</p>
<h2 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h2><p>Tip</p>
<p>每个导入应该独占一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对的 </span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#错的</span></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br></pre></td></tr></table></figure>

<p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p>
<ol>
<li>标准库导入</li>
<li>第三方库导入</li>
<li>应用程序指定导入</li>
</ol>
<p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> baz</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> Quux</span><br><span class="line"><span class="keyword">from</span> Foob <span class="keyword">import</span> ar</span><br></pre></td></tr></table></figure>

<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>Tip</p>
<p>通常每个语句应该独占一行</p>
<p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是if语句, 只有在没有else时才能这样做. 特别地, 绝不要对 <code>try/except</code> 这样做, 因为try和except不能放在同一行.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line"><span class="comment">#错的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line">  <span class="keyword">else</span>:   baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:               bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br></pre></td></tr></table></figure>



<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p>
<p><strong>应该避免的名称</strong></p>
<blockquote>
<ol>
<li>单字符名称, 除了计数器和迭代器.</li>
<li>包/模块名中的连字符(-)</li>
<li>双下划线开头并结尾的名称(Python保留, 例如<strong>init</strong>)</li>
</ol>
</blockquote>
<p><strong>命名约定</strong></p>
<blockquote>
<ol>
<li>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>
<li>用单下划线(_)开头表示模块变量或函数是protected的(使用from module import *时不会包含).</li>
<li>用双下划线(__)开头的实例变量或方法表示类内私有.</li>
<li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li>
<li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li>
</ol>
</blockquote>
<p><strong>Python之父Guido推荐的规范</strong></p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Public</th>
<th>Internal</th>
</tr>
</thead>
<tbody><tr>
<td>Modules</td>
<td>lower_with_under</td>
<td>_lower_with_under</td>
</tr>
<tr>
<td>Packages</td>
<td>lower_with_under</td>
<td></td>
</tr>
<tr>
<td>Classes</td>
<td>CapWords</td>
<td>_CapWords</td>
</tr>
<tr>
<td>Exceptions</td>
<td>CapWords</td>
<td></td>
</tr>
<tr>
<td>Functions</td>
<td>lower_with_under()</td>
<td>_lower_with_under()</td>
</tr>
<tr>
<td>Global/Class Constants</td>
<td>CAPS_WITH_UNDER</td>
<td>_CAPS_WITH_UNDER</td>
</tr>
<tr>
<td>Global/Class Variables</td>
<td>lower_with_under</td>
<td>_lower_with_under</td>
</tr>
<tr>
<td>Instance Variables</td>
<td>lower_with_under</td>
<td>_lower_with_under (protected) or __lower_with_under (private)</td>
</tr>
<tr>
<td>Method Names</td>
<td>lower_with_under()</td>
<td>_lower_with_under() (protected) or __lower_with_under() (private)</td>
</tr>
<tr>
<td>Function/Method Parameters</td>
<td>lower_with_under</td>
<td></td>
</tr>
<tr>
<td>Local Variables</td>
<td>lower_with_under</td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Hello Chocolates</title>
    <url>/2019/11/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>shun</title>
    <url>/2016/09/21/shun/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>个人网站</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
        <tag>教程</tag>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>搬瓦工</tag>
        <tag>Git</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
</search>
